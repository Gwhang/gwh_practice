package com.example.datastructure.demo.algorithm;

/**
 * 算法
 * 如何衡量一个算法的优劣
 * 一、事后统计的方法
 * 不可行 ，计算机CPU占用情况会导致结果上的差异
 * 二、事前分析估算的方法
 * 1.时间复杂度
 * 程序执行消耗的时间
 * 2.空间复杂度
 * 程序运行占用的内存
 *
 * 语句频度
 * 一个算法中的语句执行次数称为语句频度，记为T(n)
 *时间复杂度
 * 一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，
 * T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n))为算法的渐进时间复杂度，简称时间复杂度。
 * T(n)不同，但时间复杂度可能相同
 * 常见的时间复杂度
 * 常数阶O(1)
 * 对数阶O(log2n)
 * 线性阶O(n)
 * 线性对数阶O(nlog2n)
 * 平方阶O(n2)
 * 立方阶O(n3)
 * K次方阶O(nk)
 * 指数阶O(2n)
 * 随着问题规模的n不断增大，上述时间复杂度不断增大，算法的执行效率越低
 *
 * 计算时间复杂度的方法
 * 用常数1代替运行时间中的所有加法常数
 * 修改后的运行次数函数中，只保留最高阶项
 * 去除最高阶项的系数
 *
 * 平均时间复杂度和最坏时间复杂度
 * 平均时间复杂度是指所有的输入实例均以等概率出现的情况下，该算法的运行时间。
 * 最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的实际复杂度。这样做的原因是：最坏情况下的时间复杂度是
 * 算法在任何输入实例上运行时间的界限。这就保证了算法的运行时间不会比最坏情况更长
 *
 *
 */
public class AlgorithmSummary {
}
