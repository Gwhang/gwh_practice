package com.example.datastructure.demo;

/**
 * 概述
 * 1.数据结构概述
 * 2.算法概述
 */
public class Summary {

    /**
     * 一、数据结构概述
     * 1.什么是数据结构？
     *  数据结构是指相互之间存在这一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成
     * 2.数据的存储结构
     *  数据的存储结构又分为：
     *  1.顺序存储结构
     *  顺序存储结构：是把数据元素存放在地址联系的存储单元里，其数据间的逻辑关系和物理关系是一致的，数组就是顺序存储结构的典型代表
     *  2.链式存储结构
     *链式存储：随机存储，不需要按照顺序，链表存储格式除了数据区域外，还有一个区域存储了当前节点的下一节点的地址，我们把这个记录下个结点地址的指针或
     * 引用叫作后继指针或引用Next。链式存储结构中，我们将第一个节点称为头结点，将最后一个节点称为尾节点。头节点记录链表的起始地址，
     * 有了这个地址，我们就可以遍历整个链表。尾节点的后继指针或者引用不是指向一个具体的节点，而是指向一个空地址NULL，从而表示该节点为链表的尾节点。
     *  两种方式的区别
     *   顺序和无序
     * 3.数据的逻辑结构
     *  数据结构分为：
     *  1.集合结构
     *  集合结构中的数据元素同属于一个集合，他们之间是并列的关系，除此之外没有其他关系
     *  2.线性结构
     *  线性结构中的元素存在一对一的相互关系
     *  3.树形结构
     *  树形结构中的元素存在一对多的相互关系
     *  4.图形结构
     *  图形结构中的元素存在多对多的相互关系
     *
     * 二、算法概述
     * 1.算法的定义
     * 解决问题的思路
     * 是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。
     * 2.算法的特性
     *  1.输入
     *  可以有0到多个数据
     *  2.输出
     *  每一个算法最少要有一个输出
     *  3.有穷性
     *  再有限的时间内执行出结果
     *  4.确定性
     *  对结果的确定性，一个输入对应一个输出
     *  5.可行性
     *  算法可以解决实际问题
     *3.算法的基本要求
     * 1.正确性
     * 正确的解决问题
     * 2.可读性
     * 编写的算法可以让其他人可以看懂
     * 3.健壮性
     * 算法支撑的计算能力
     * 4.时间复杂度
     * 计算占用的时间
     * 5.空间复杂度
     * 计算占用的内存
     *
     */
    public static void main(String[] args) {
        int total=0;
        int end=100;
        //1.循环计算
//        for (int i = 1;i<=end;i++){
//            total+=i;
//        }
        //2.直接计算
        total=(1+end)*end/2;

        System.out.println(total);
    }
}
