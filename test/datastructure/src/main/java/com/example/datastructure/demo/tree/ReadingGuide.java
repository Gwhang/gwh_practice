package com.example.datastructure.demo.tree;

/**
 * 数结构
 * 什么是树结构？
 * 有多个分支组成，多个分支都连接至1个结点，像是一颗倒置的大树
 * 为什么使用树结构?
 * 对于线性结构数组和链表都有缺陷 比如数组插入删除效率慢，链表查找效率慢，使用树结构可以很好的解决这种问题
 * 
 *二叉树概念
 * 任何一个节点的子节点数量不超过2
 * 二叉树的节点分为左节点和右节点
 * 满二叉树
 * 所有叶子节点都在最后一层，而且节点的总数为：2^n-1   n是数的高度
 * 完全二叉树
 * 所有叶子节点都在最后一层或倒数第二层，且最后一层的叶子节点在左边连续，倒数第二节点的叶子节点在右边连续
 *
 *
 * 树的遍历
 * 1.前序遍历
 * 2.中序遍历
 * 3.后序遍历
 * 三种遍历都是以根节点的遍历顺序为主的 比如 根节点2 左节点1 右节点3 前序遍历 就是从 根节点2开始，然后是左节点1，最后是右节点3
 * 中序遍历 先是左节点1 然后是根节点2 最后是右节点3 后序遍历 先是左节点1 然后是右节点3 然后是根节点2
 *
 * 顺序存储的二叉树通常只考虑完全二叉树
 * 第n个元素的左子节点是:2*n+1
 * 第n个元素的右子节点是:2*n+2
 * 第n个元素的父节点是:(n-1)/2
 *
 *
 *
 */
public class ReadingGuide {
}
